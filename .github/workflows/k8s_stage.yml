name: Deploy to stage

on:
  workflow_dispatch:  # Allows manual triggering from GitHub UI

permissions:
  id-token: write
  contents: write

jobs:
  deploy-to-stage:
    runs-on: ubuntu-latest
    env:
      PLATFORM_VERSION: "v1.2.3"  # Replace with your test version

    steps:
      #- name: Create GitHub App Token
      #  uses: actions/create-github-app-token@v1
      #  id: app-token
      #  with:
      #    app-id: ${{ secrets.GH_APP_ID }}
      #    private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}
      #    owner: ${{ github.repository_owner }}
      #    repositories: |
      #      ${{ github.event.repository.name }}
      #      cds-k8s-configs

      #- name: Get GitHub App User ID
      #  id: get-user-id
      #  run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
      #  env:
      #    GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main  # Or use a specific branch/tag

      #- name: Install Updatecli in the runner
      #  uses: updatecli/updatecli-action@v2
#
      #- name: Run Updatecli in Dry Run mode
      #  run: updatecli diff --config .github/updatecli/updatecli.d/ci.yaml --values .github/updatecli/values.d/scm.yaml --clean=true
      #  env:
      #    GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
      #    GITHUB_EMAIL: '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'
      #    GITHUB_USER: '${{ steps.app-token.outputs.app-slug }}[bot]'
      #    IMAGE_TAG: ${{ env.PLATFORM_VERSION }}
#
      #- name: Run Updatecli in Apply mode
      #  run: updatecli apply --config .github/updatecli/updatecli.d/ci.yaml --values .github/updatecli/values.d/scm.yaml --clean=true
      #  env:
      #    GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
      #    GITHUB_EMAIL: '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'
      #    GITHUB_USER: '${{ steps.app-token.outputs.app-slug }}[bot]'
      #    IMAGE_TAG: ${{ env.PLATFORM_VERSION }}

      - name: Cut out a new release branch
        run: |
          git config --local user.email "${{ github.repository_owner }}@users.noreply.github.com"
          git config --local user.name "GitHub Actions"
          git switch -c ${{ env.PLATFORM_VERSION }}
          git push origin ${{ env.PLATFORM_VERSION }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout main repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Update version in metadata.json
        run: |
          jq --arg VERSION "${{ env.PLATFORM_VERSION }}" --arg TIMESTAMP "$(date -u +%Y-%m-%dT%H:%M:%SZ)" --arg IMAGE "cds-workflows:${{ env.PLATFORM_VERSION }}" '
            .version = $VERSION | 
            .environments.staging.image = $IMAGE |
            .release.current = $VERSION |
            .updated = $TIMESTAMP
          ' metadata.json > metadata.json.tmp
          mv metadata.json.tmp metadata.json
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit changes
        run: |
          git add metadata.json
          git commit -m "Update version to ${{ env.PLATFORM_VERSION }}"
          git push origin main
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
